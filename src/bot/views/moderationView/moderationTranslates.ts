import { ObjectId } from "mongodb"
import { ExtraEditMessageText } from "telegraf/typings/telegram-types"
import { Translation, Sentence, voteModel, translation, ConfirmedTranslations } from "../../../models/ISentence"
import rlhubContext from "../../models/rlhubContext"
import greeting from "./greeting"

export async function moderation_translates(ctx: rlhubContext) {
    try {

        // await render_vote_sentence(ctx)

    } catch (err) {

        console.log(err)

    }
}

export default async function moderation_translates_render (ctx: rlhubContext) {
    try {

        // –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ
        let translation: translation | null = await Translation.aggregate([
            { $sort: { rating: -1 } },
            { $match: { reported: false } },
            { $limit: 1 }
        ]).then(async (response) => { return response[0] }).catch(async (err) => { console.error(err) })

        if (!translation) {
            if (ctx.updateType === 'callback_query') {

                ctx.answerCbQuery('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return await greeting(ctx)

            }
        } 


        if (translation === null || !translation._id) {

            return await greeting(ctx)

        }

        const sentence_russian = await Sentence.findById(translation.sentence_russian)

        // –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if (translation) {

            ctx.scene.session.current_translation_for_vote = translation._id

        }

        // —Ç–µ–∫—Å—Ç
        let message = `<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è / –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</b>\n\n`
        message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ  \n\n<pre>${sentence_russian?.text}</pre>\n`
        // message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${sentence_russian?.translations.length}\n\n`
        message += `\n\n–ü–µ—Ä–µ–≤–æ–¥ \n\n`
        message += `<pre>${translation?.translate_text}</pre>\n\n`

        const options = {
            weekday: 'short', // –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä '–ü–Ω'
            year: 'numeric', // –≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä '2023'
            month: 'short', // –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '–∞–ø—Ä'
            day: 'numeric', // —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '21'
            hour: 'numeric', // —á–∞—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä '17'
            minute: 'numeric', // –º–∏–Ω—É—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä '14'
            second: 'numeric', // —Å–µ–∫—É–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä '33'
        };

        if (sentence_russian) {
            const formattedDate = sentence_russian.createdAt.toLocaleDateString('ru-RU', options); // '–ü–Ω, 21 –∞–ø—Ä. 2023'
            message += `<pre>${formattedDate}</pre>`
        }

        let statistic = {
            plus: <any>[],
            minus: <any>[]
        }

        // console.log(sentence_russian)

        if (translation) {
            if (translation.votes) {
                if (translation.votes.length) {


                    for (let i = 0; i < translation.votes.length; i++) {

                        const voteID = translation.votes[i]
                        const vote = await voteModel.findOne({ _id: voteID })

                        if (vote?.vote) {
                            statistic.plus.push(vote)
                        } else {
                            statistic.minus.push(vote)
                        }

                    }

                    let realRating = statistic.plus.length - statistic.minus.length

                    await Translation.findByIdAndUpdate(translation._id, {

                        $set: {
                            rating: realRating
                        }

                    })

                    if (realRating == 3) {

                        await new ConfirmedTranslations(translation).save()
                        await Translation.findByIdAndDelete(translation?._id)

                    }

                    // message += `\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <pre>15+, 2-</pre>`

                }
            }
        }

        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: `üëç ${statistic.plus.length}`,
                            callback_data: 'good'
                        },
                        {
                            text: `–ù–µ –∑–Ω–∞—é`,
                            callback_data: 'dontknow'
                        },
                        {
                            text: `üëé ${statistic.minus.length}`,
                            callback_data: 'bad'
                        }
                    ],
                    [
                        {
                            text: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
                            callback_data: 'addTranslate'
                        }
                    ],
                    [
                        {
                            text: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è',
                            callback_data: 'report'
                        }
                    ],
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }
        if (ctx.updateType === 'callback_query') {
        
            ctx.editMessageText(message, extra)
            ctx.answerCbQuery()
        
        } else {
        
            ctx.reply(message, extra)
        
        }

        ctx.wizard.selectStep(2)

    } catch (error) {
        
        ctx.wizard.selectStep(0)
        await greeting(ctx)
        console.error(error)

    }
}