import { ExtraEditMessageText } from "telegraf/typings/telegram-types"
import { Sentence, ISentence } from "../../../models/ISentence"
import rlhubContext from "../../models/rlhubContext"
import greeting from "./greeting"

export default async function moderation_sentences_render(ctx: rlhubContext) {
    try {

        return await Sentence.findOne({ accepted: "not view" }).then(async (document: ISentence | null) => {

            // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–¥–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç

            if (!document) {

                await ctx.answerCbQuery('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                ctx.wizard.selectStep(0)
                return await greeting(ctx).catch(() => { ctx.answerCbQuery('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') })

            } else {

                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç

                if (document._id) {
                    if (!ctx.session.__scenes) {
                        return false
                    }
                    ctx.session.__scenes.moderation_sentence = document._id

                }


                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

                let message: string = `<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è</b> \n\n`
                let extra: ExtraEditMessageText = {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üëç',
                                    callback_data: 'good'
                                },
                                {
                                    text: 'üëé',
                                    callback_data: 'bad'
                                }
                            ],
                            [
                                {
                                    text: '–ù–∞–∑–∞–¥',
                                    callback_data: 'back'
                                }
                            ]
                        ]
                    }
                }

                const options = {
                    weekday: 'short', // –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä '–ü–Ω'
                    year: 'numeric', // –≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä '2023'
                    month: 'short', // –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '–∞–ø—Ä'
                    day: 'numeric', // —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '21'
                    hour: 'numeric', // —á–∞—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä '17'
                    minute: 'numeric', // –º–∏–Ω—É—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä '14'
                    second: 'numeric', // —Å–µ–∫—É–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä '33'
                };

                const formattedDate = document.createdAt.toLocaleDateString('ru-RU', options); // '–ü–Ω, 21 –∞–ø—Ä. 2023'

                message += `${document.text} \n\n`
                message += `<pre>${formattedDate}</pre>`

                if (ctx.updateType === 'callback_query') {

                    await ctx.editMessageText(message, extra)
                    ctx.wizard.selectStep(1)
                    ctx.answerCbQuery()

                } else {

                    await ctx.reply(message, extra)

                }

            }
        })


    } catch (err) {

        console.log(err)

    }
}