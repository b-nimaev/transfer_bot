import { ExtraEditMessageText } from "telegraf/typings/telegram-types"
import { IUser, User } from "../../../models/IUser"
import rlhubContext from "../../models/rlhubContext"
import format_money from "../../utlis/format_money"
import { ConfirmedTranslations, translation } from "../../../models/ISentence"

export default async function greeting(ctx: rlhubContext) {
    try {

        if (ctx.from) {

            let user: IUser | null = await User.findOne({ id: ctx.from.id })

            if (user) {

                const extra: ExtraEditMessageText = {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–û –ø—Ä–æ–µ–∫—Ç–µ',
                                    callback_data: 'about'
                                }
                            ],
                            [
                                {
                                    text: '–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
                                    callback_data: 'messages'
                                }
                            ],
                            [
                                {
                                    text: 'üí∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
                                    callback_data: 'help'
                                }
                            ],
                            [
                                {
                                    text: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                                    callback_data: 'common_settings'
                                }
                            ],
                            [
                                {
                                    text: '–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                                    callback_data: 'reference_materials'
                                }
                            ],
                            [
                                {
                                    text: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
                                    callback_data: 'referral'
                                }
                            ],
                            [
                                {
                                    text: '–ù–∞–∑–∞–¥',
                                    callback_data: 'home'
                                },
                                {
                                    text: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                                    url: 'https://t.me/bur_live'
                                }
                            ],
                        ]
                    }
                }


                const confirmatedTranslations: translation[] | undefined | false = await get_confirmated_translations(ctx.from.id)



                let words = []
                let message: string = `<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> \n\n`
                message += `–†–µ–π—Ç–∏–Ω–≥: ${user.rating} \n`
                // message += `–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: 0 \n`
                // message += `–°–ª–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${words.length} \n`
                message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ${user.proposed_proposals?.length}\n`

                if (confirmatedTranslations) {

                    message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${confirmatedTranslations.length} \n`
                
                }

                message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥: ${user.voted_translations?.length}`

                message += `\n\n<b>–í–Ω–µ—Å–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç ${format_money(user.supported)} ‚ÇΩ</b>`

                ctx.updateType === 'message' ? await ctx.reply(message, extra) : false
                ctx.updateType === 'callback_query' ? await ctx.editMessageText(message, extra) : false

            } else {
                console.log('123')
            }
        }

    } catch (err) {
        console.error(err);
    }
}

async function get_confirmated_translations(user_id: number) {
    try {

        const user: IUser | null = await User.findOne({ id: user_id })

        if (!user || !user._id) {
            return false
        }

        const docs: translation[] | null = await ConfirmedTranslations.find({ author: user._id })

        return docs

    } catch (error) {

        console.error(error)

    }
}