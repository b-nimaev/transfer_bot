import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import rlhubContext from "../models/rlhubContext";
import greeting from "./dashboardView/greeting";
import help_handler, { spb } from "./dashboardView/helpHandler";
import axios from 'axios';
const path = require('path');  // –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å path
const pdf2pic = require('pdf2pic');  // –ü–æ–¥–∫–ª—é—á–∞–µ–º pdf2pic
const pdf = require('pdf-parse'); // –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É pdf-parse
const fs = require('fs');  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å fs –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const handler = new Composer<rlhubContext>();
const dashboard = new Scenes.WizardScene("dashboard", handler, 
    async (ctx) => await about_project(ctx), 
    async (ctx) => await help_handler(ctx),
    async (ctx) => await reference_materials_handler(ctx),
    async (ctx: rlhubContext) => await spb_handler(ctx),
    async (ctx: rlhubContext) => await messages_handler(ctx),
    async (ctx: rlhubContext) => await crypto_pay_check(ctx),
    async (ctx: rlhubContext) => await crypto_pay_check_handler(ctx),
    async (ctx: rlhubContext) => await referral_section_handler(ctx)
);

async function referral_section_handler (ctx: rlhubContext) {
    try {

        if (ctx.updateType === 'callback_query') {

            const data: string = ctx.update.callback_query.data

            if (data === 'back') {
                
                ctx.wizard.selectStep(0)
                await greeting(ctx)


            }


        }

    } catch (error) {

        ctx.wizard.selectStep(0)
        await greeting(ctx)
        console.error(error)

    }
}

async function crypto_pay_check_handler(ctx: rlhubContext) {

    try {

        if (ctx.updateType === 'message') {



        }

    } catch (error) {

        console.error(error)

    }

}

async function crypto_pay_check(ctx: rlhubContext) {
    try {

        if (ctx.updateType === 'callback_query') {

            const data: 'back' | 'success' = ctx.update.callback_query.data

            if (data === 'back') {
                await help(ctx)
            }

            if (data === 'success') {

                const message: string = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–µ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>0.000456 btc</code>`
                const extra: ExtraEditMessageText = {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'back', callback_data: 'back' }]
                        ]
                    }
                }

                await ctx.editMessageText(message, extra)

            }

        }

    } catch (error) {

        await greeting(ctx)
        ctx.wizard.selectStep(0)
        console.error(error)

    }
}

async function messages_handler (ctx: rlhubContext) {
    try {

        if (ctx.updateType === 'callback_query') {

            let data: 'back' = ctx.update.callback_query.data

            if (data === 'back') {

                ctx.wizard.selectStep(0)
                ctx.answerCbQuery()
                return await greeting(ctx)

            }

        } else {

            await messages(ctx)

        }

    } catch (error) {

        console.error(error)

    }
}

async function spb_handler (ctx: rlhubContext) {
    try {

        if (ctx.updateType === 'message') {

            if (ctx.update.message.text) {

                const message: string = ctx.update.message.text

                if (message === '/check') {

                    let reply_message: string = `–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç \n–°–ø–∞—Å–∏–±–æ üòá\n\n`
                    reply_message += `–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è, –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å`

                    await ctx.reply(reply_message, { parse_mode: 'HTML' })
                    ctx.wizard.selectStep(0)
                    return greeting(ctx)

                }

                if (message === '/cancel') {



                }

                return spb(ctx)
                

            }

        }
        
    } catch (error) {

        console.error(error)

    }
}

// –°–µ–∫—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

async function reference_materials_handler(ctx: rlhubContext) {
    try {

        if (ctx.updateType === 'callback_query') {

            let data: 'back' = ctx.update.callback_query.data

            if (data === 'back') {

                ctx.wizard.selectStep(0)
                await greeting(ctx)

            }

            ctx.answerCbQuery()
        }

    } catch (error) {
        
        console.error(error)

    }
}

async function reference_materials(ctx: rlhubContext) {
    try {

        let message: string = `<b>–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n`

        message += `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –æ–±–æ–≥–∞—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. \n\n`
        message += `–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∏—â–µ—Ç–µ –ª–∏ –≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É—á–µ–±—ã, —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —ç—Ç–∞ —Å–µ–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è —Ü–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.`

        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ callback_data: 'add', text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª' }],
                    [{ callback_data: 'back', text: '–ù–∞–∑–∞–¥' }]
                ]
            }
        }

        if (ctx.updateType === 'callback_query') {

            await ctx.editMessageText(message, extra)

        } else {

            await ctx.reply(message, extra)

        }

        ctx.wizard.selectStep(3)

    } catch (error) {
        console.error(error)
    }
}

dashboard.enter(async (ctx: rlhubContext) => {
    
    await greeting(ctx)

});

dashboard.action("referral", async (ctx: rlhubContext) => {
    try {

        const message: string = `<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b> \n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/burlive_test_bot?start=ref_${ctx.from?.id}</code>`
        const extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'back', callback_data: 'back' }]
                ]
            }
        }

        await ctx.editMessageText(message, extra)

        ctx.answerCbQuery()
        ctx.wizard.selectStep(8)

    } catch (error) {

        console.error(error)

    }
})

dashboard.action("messages", async (ctx: rlhubContext) => await messages(ctx))

async function messages (ctx: rlhubContext) {
    try {

        let message: string = `<b>–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n`
        message += `–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç`
        const extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞–∑–∞–¥', callback_data: 'back'
                        }
                    ]
                ]
            }
        }

        ctx.wizard.selectStep(5)

        if (ctx.updateType === 'callback_query') {

            ctx.answerCbQuery()
            await ctx.editMessageText(message, extra)

        } else {

            await ctx.reply(message, extra)

        }

    } catch (error) {

        console.error(error)

    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

dashboard.action("common_settings", async (ctx) => {
    await ctx.answerCbQuery('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç / –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    return ctx.scene.enter('settings')
})


async function fetchPdfToBuffer(pdfUrl: string) {
    try {
        const response = await axios.get(pdfUrl, { responseType: 'arraybuffer' });
        return Buffer.from(response.data); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤ –≤ –±—É—Ñ–µ—Ä
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF:', error);
        return null;
    }
}

dashboard.on('document', async (ctx) => {
    const file = ctx.message.document;
    const fileId = await ctx.telegram.getFile(file.file_id);
    const fileLink = await ctx.telegram.getFileLink(file.file_id);

    const destinationPath = path.join(__dirname, 'dashboardView/downloaded_pdfs', file.file_name);  // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞

    await downloadPdf(fileLink.href, destinationPath);  // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞

    ctx.reply('PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
});

dashboard.command('page', async (ctx) => {
    const pageNumber = parseInt(ctx.message.text.split(' ')[1]);

    if (!isNaN(pageNumber)) {
        try {
            const imageBase64 = await convertPageToImage(ctx, pageNumber);
            const imageBase64String = imageBase64 as string; // Explicitly cast to string

            console.log(imageBase64)

            ctx.replyWithPhoto({ source: imageBase64String }, {
                reply_markup: {
                    inline_keyboard: [
                        [{ callback_data: 'back', text: '–ù–∞–∑–∞–¥' }]
                    ]
                }
            });
        } catch (error) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞.');
            console.log(error)
        }
    } else {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
    }
});

async function downloadPdf(pdfUrl: string, destinationPath: string) {
    try {
        const response = await axios.get(pdfUrl, {
            responseType: 'arraybuffer'
        });

        fs.writeFileSync(destinationPath, response.data);

        console.log(`PDF –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${destinationPath}`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF:', error);
    }
}
async function convertPageToImage(ctx: rlhubContext, pageNumber: number) {
    if (!ctx.scene.session.link) {
        return '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.';
    }

    const fileLink = ctx.scene.session.link;
    console.log(fileLink.href)
    await downloadPdf(fileLink.href, './')
    // try {
    //     const options = {
    //         density: 100,
    //         saveFilename: "page" + pageNumber,
    //         savePath: "./images",
    //         format: "png",
    //         width: 600,
    //         height: 800
    //     };

    //     // console.log(file)

    //     const response = await axios.get(fileLink.href, { responseType: 'arraybuffer' });
    //     // const convert = pdf2pic.fromBase64(response.data, options);
    //     const pageToConvertAsImage = pageNumber;

    //     // return new Promise((resolve, reject) => {
    //     //     convert(pageToConvertAsImage, { responseType: "base64" })
    //     //         .then((resolveData: any) => {
    //     //             console.log("Page is now converted as image");
    //     //             resolve(resolveData.base64);
    //     //         })
    //     //         .catch((error: any) => {
    //     //             console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞:', error);
    //     //             reject(error);
    //     //         });
    //     // });

    // } catch (error) {
    //     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞:', error);
    //     return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞.';
    // }
}



// async function extractTextFromPage(ctx: rlhubContext, pageNumber: number) {
//     if (!ctx.scene.session.link) {
//         return '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.';
//     }

//     const fileLink = ctx.scene.session.link.href;

//     try {
//         const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
//         const data = await pdf(response.data);
//         const allPages = data.text.split('\n\n');
//         const pageIndex = pageNumber - 1;

//         if (pageIndex >= 0 && pageIndex < allPages.length) {
//             return allPages[pageIndex];
//         } else {
//             return '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
//         }
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞:', error);
//         return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞.';
//     }
// }

async function about_project (ctx: rlhubContext) {
    
    try {

        if (ctx.updateType === 'callback_query') {
            
            if (ctx.callbackQuery) {

                // @ts-ignore
                if (ctx.callbackQuery.data) {

                    // @ts-ignore
                    let data: 'back' = ctx.callbackQuery.data

                    if (data === 'back') {
                        
                        ctx.wizard.selectStep(0)
                        await ctx.answerCbQuery()
                        await greeting(ctx)

                    }

                }

            }
            
        } else {

            about_project_section_render (ctx)

        }

    } catch (err) {
        
        console.log(err)

    }

}

dashboard.action("about", async (ctx) => await about_project_section_render (ctx))
async function about_project_section_render (ctx: rlhubContext) {
    try {
        
        let message: string = `<b>–ù–µ–º–Ω–æ–≥–æ –æ –ø—Ä–æ–µ–∫—Ç–µ</b> \n\n`
        message += `–ù–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞—Ü–µ–ª–µ–Ω –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –ë—É—Ä—è—Ç–∏–∏. \n\n`
        message += `–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —è–∑—ã–∫ —Å—Ä–µ–¥–∏ –º–æ–ª–æ–¥–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–≤–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ä–≥–∞–Ω–∏–∑—É—è —è–∑—ã–∫–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. \n\n`
        message += `–ù–∞—à–∞ —Ü–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–æ–≥–∞—Ç—Å—Ç–≤–æ –±—É—Ä—è—Ç—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã –∏ –µ–µ —è–∑—ã–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π. \n\n`
        message += `<a href="https://telegra.ph/Kak-podelitsya-spravochnymi-materialami-08-10">–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?</a> \n`
        message += `<a href="https://telegra.ph/Kak-podderzhat-proekt-09-02">–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?</a> \n`
        message += `<a href="https://telegra.ph/Kak-podelitsya-spravochnymi-materialami-08-10">–ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏?</a> \n`
        message += `<a href="https://telegra.ph/Kak-podelitsya-spravochnymi-materialami-08-10">–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞?</a> \n\n`
        message += `<i>–ë—É–¥—É —Ä–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞!\n\n @frntdev</i>`
        
        let extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back',
                        }
                    ]
                ]
            }
        }

        if (ctx.updateType === 'callback_query') {
            
            await ctx.editMessageText(message, extra)

            ctx.answerCbQuery()
            ctx.wizard.selectStep(1)

        } else {

            await ctx.reply(message, extra)

        }

    } catch (err) {
        console.log(err)
    }
}

handler.on("message", async (ctx) => await greeting(ctx))

dashboard.action('reference_materials', async (ctx) => {
    await reference_materials(ctx)
    return ctx.answerCbQuery()
})

dashboard.action("help", async (ctx) => await help(ctx))
async function help(ctx: rlhubContext) {
    try {

        let message: string = `<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ üí∞</b> \n\n`
        // await get_link_for_payment(ctx)
        message += `–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É \n\n`
        // <i>–° –º–∏—Ä—É –ø–æ –Ω–∏—Ç–∫–µ!</i>\n\n`
        message += `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 ‚ÇΩ\n`
        message += `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 60 000 ‚ÇΩ`
        
        const extra: ExtraEditMessageText = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '50 ‚ÇΩ', callback_data: 'rub 50' },
                        { text: '250 ‚ÇΩ', callback_data: 'rub 250' },
                        { text: '500 ‚ÇΩ', callback_data: 'rub 500' }
                    ],
                    [
                        { text: '750 ‚ÇΩ', callback_data: 'rub 750' },
                        { text: '1250 ‚ÇΩ', callback_data: 'rub 1250' },
                        { text: '2500 ‚ÇΩ', callback_data: 'rub 2500' }
                    ],
                    [
                        { text: '–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: 'spb' }
                    ],
                    [
                        { text: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data: 'crypto' }
                    ],
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: 'back'
                        }
                    ]
                ]
            }
        }

        if (ctx.updateType === 'callback_query') {
            await ctx.editMessageText(message, extra)
        }

        ctx.wizard.selectStep(2)

    } catch (err) {

        console.log(err)

    }
}

dashboard.action("home", async (ctx) => {
    return ctx.scene.enter('home')
})

dashboard.action("contact", async (ctx) => {
    return ctx.answerCbQuery('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
})

export default dashboard